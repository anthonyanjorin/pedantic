package plantmps.plugin.plugin;

/*Generated by MPS */

import org.apache.batik.swing.svg.SVGUserAgentGUIAdapter;
import java.awt.Component;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.ProjectManager;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import com.intellij.openapi.ui.Messages;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import java.awt.Font;
import jetbrains.mps.nodeEditor.EditorSettings;
import java.awt.GraphicsEnvironment;

public class MbeddrUserAgent extends SVGUserAgentGUIAdapter {
  public MbeddrUserAgent(Component parent) {
    super(parent);
  }
  @Override
  public void openLink(String urlString, boolean b) {
    urlString = urlString.substring(urlString.indexOf("://") + 3);
    String[] segments = urlString.split("/");
    String projectName = segments[0];
    String modelIdAsString = segments[1];
    String nodeAsString = segments[2];
    this.openLink(projectName, modelIdAsString, nodeAsString);
  }
  private void openLink(final String projectName, String modelIdAsString, String nodeIdAsString) {
    Iterable<Project> allOpenProjects = ProjectManager.getInstance().getOpenedProjects();
    Project project;
    if (projectName.equalsIgnoreCase("DEFAULT")) {
      project = null;
    } else {
      project = Sequence.fromIterable(allOpenProjects).findFirst(new IWhereFilter<Project>() {
        public boolean accept(Project it) {
          return it.getName().equals(projectName);
        }
      });
    }
    if (project == null) {
      project = Sequence.fromIterable(allOpenProjects).first();
      if (project != null) {
      } else {
      }
    }
    final SModelId modelID = PersistenceFacade.getInstance().createModelId(modelIdAsString);
    final SNodeId nodeID = PersistenceFacade.getInstance().createNodeId(nodeIdAsString);
    final Project fP = project;
    ModelAccess.instance().runWriteInEDT(new Runnable() {
      @Override
      public void run() {
        SModel model = fP.getRepository().getModel(modelID);
        if (model == null) {
          Messages.showErrorDialog("Cannot find model with the ID " + modelID, "Error");
          return;
        }
        final SNode resolveNode = model.getNode(nodeID);
        if ((resolveNode == null)) {
          Messages.showErrorDialog("Cannot find node with the nodeID " + nodeID, "Error");
          return;
        }
        if (resolveNode != null) {
          NavigationSupport.getInstance().openNode(fP, resolveNode, true, true);
        }
      }
    });
  }
  @Override
  public String getDefaultFontFamily() {
    Font defaultEditorFont = EditorSettings.getInstance().getDefaultEditorFont();
    GraphicsEnvironment localGraphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
    if (Sequence.fromIterable(Sequence.fromArray(localGraphicsEnvironment.getAvailableFontFamilyNames())).contains(defaultEditorFont.getFontName())) {
      return defaultEditorFont.getFontName() + ", sans-serif";
    } else {
      return "sans-serif";
    }
  }

}
