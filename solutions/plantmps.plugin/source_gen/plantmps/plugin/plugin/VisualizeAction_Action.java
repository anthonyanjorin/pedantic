package plantmps.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class VisualizeAction_Action extends BaseAction {
  private static final Icon ICON = IconContainer.ICON_a0;

  public VisualizeAction_Action() {
    super("Visualize", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.UNDO_PROJECT);
    this.setMnemonic("V".charAt(0));
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null && !(SNodeOperations.isInstanceOf(node, CONCEPTS.IVisualizable$Rr))) {
        node = null;
      }
      if (node == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    SVGViewer_Tool svgViewer = event.getData(CommonDataKeys.PROJECT).getComponent(ProjectPluginManager.class).getTool(SVGViewer_Tool.class);

    svgViewer.openTool(true);
    svgViewer.load(event.getData(MPSCommonDataKeys.NODE));
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IVisualizable$Rr = MetaAdapterFactory.getInterfaceConcept(0xe8c53fb6e3d145b8L, 0x804f056de67b4715L, 0x7b0220c2de5fc909L, "plantmps.structure.IVisualizable");
  }
}
