package plantmps.plugin.plugin;

/*Generated by MPS */

import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.svg.SVGUserAgent;
import org.apache.batik.swing.gvt.AbstractPanInteractor;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import org.apache.batik.swing.svg.GVTTreeBuilderAdapter;
import org.apache.batik.swing.svg.GVTTreeBuilderEvent;
import java.awt.geom.AffineTransform;
import org.apache.batik.util.XMLResourceDescriptor;
import org.apache.batik.anim.dom.SAXSVGDocumentFactory;
import net.sourceforge.plantuml.SourceStringReader;
import java.io.ByteArrayOutputStream;
import net.sourceforge.plantuml.FileFormatOption;
import net.sourceforge.plantuml.FileFormat;
import java.io.ByteArrayInputStream;
import org.w3c.dom.svg.SVGDocument;
import java.io.IOException;

public class PlantUMLSVGCanvas extends JSVGCanvas {
  public PlantUMLSVGCanvas(SVGUserAgent agent, boolean eventsEnabled, boolean selectableText) {
    super(agent, eventsEnabled, selectableText);

    setEnablePanInteractor(false);
    panInteractor = new AbstractPanInteractor() {
      @Override
      public boolean startInteraction(InputEvent event) {
        int mods = event.getModifiers();
        return event.getID() == MouseEvent.MOUSE_PRESSED && (mods & InputEvent.BUTTON1_MASK) != 0 && noModifiers(event);
      }
      private boolean noModifiers(InputEvent event) {
        return !(event.isAltDown()) && !(event.isAltGraphDown()) && !(event.isControlDown()) && !(event.isMetaDown()) && !(event.isShiftDown());
      }
    };
    setEnablePanInteractor(true);
    setRecenterOnResize(false);
    setDoubleBufferedRendering(true);
    // rotate to make text visible
    addGVTTreeBuilderListener(new GVTTreeBuilderAdapter() {
      @Override
      public void gvtBuildCompleted(GVTTreeBuilderEvent event) {
        PlantUMLSVGCanvas canvas = PlantUMLSVGCanvas.this;
        AffineTransform rotation = AffineTransform.getRotateInstance(0.001, canvas.getSize().getWidth() / 2, canvas.getHeight() / 2);
        rotation.concatenate(canvas.getRenderingTransform());
        canvas.setRenderingTransform(rotation);
      }
    });
  }
  public void loadPlantUMLDiagram(String plantUMLString) {
    String parser = XMLResourceDescriptor.getXMLParserClassName();
    SAXSVGDocumentFactory factory = new SAXSVGDocumentFactory(parser);
    SourceStringReader reader = new SourceStringReader(plantUMLString);
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    try {
      reader.generateImage(bos, new FileFormatOption(FileFormat.SVG));
      bos.close();
      ByteArrayInputStream is = new ByteArrayInputStream(bos.toByteArray());
      SVGDocument document = factory.createSVGDocument("", is);
      this.setSVGDocument(document);
      is.close();
    } catch (IOException e) {
    }
  }
}
