package plantmps.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.tool.GeneratedTool;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.Icon;
import javax.swing.MutableComboBoxModel;
import jetbrains.mps.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.mps.openapi.model.SNode;
import plantmps.behavior.VisGraph;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import plantmps.behavior.IVisualizable__BehaviorDescriptor;
import java.awt.geom.AffineTransform;
import java.awt.Dimension;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.workbench.action.BaseGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import org.apache.batik.swing.JSVGScrollPane;

public class SVGViewer_Tool extends GeneratedTool {
  private static final Logger LOG = LogManager.getLogger(SVGViewer_Tool.class);
  private static final Icon ICON = IconContainer.ICON_a0_3;
  private PlantUMLSVGCanvas svgCanvas;
  private MutableComboBoxModel categoryModel;
  private Project project;
  private String plantUMLSource = "";
  public SVGViewer_Tool(com.intellij.openapi.project.Project project) {
    super(project, "visualization", null, ICON, ToolWindowAnchor.RIGHT, false);
  }
  public void init(com.intellij.openapi.project.Project project) {
    super.init(project);
    SVGViewer_Tool.this.project = ProjectHelper.toMPSProject(project);
  }
  /*package*/ void load(SNode n) {
    VisGraph v = new VisGraph(SVGViewer_Tool.this.project);

    LoggingRuntime.logMsgView(Level.INFO, "Created VisGraph for chosen node", SVGViewer_Tool.class, null, SVGViewer_Tool.this.project);

    IVisualizable__BehaviorDescriptor.getVisualization_id7G28cbuofR4.invoke(n, v);

    LoggingRuntime.logMsgView(Level.INFO, "Produced visualisation from node: " + v.toString(), SVGViewer_Tool.class, null, SVGViewer_Tool.this.project);

    SVGViewer_Tool.this.plantUMLSource = v.toString();

    SVGViewer_Tool.this.svgCanvas.loadPlantUMLDiagram(v.toString());

    LoggingRuntime.logMsgView(Level.INFO, "Loaded new PlantUML diagram", SVGViewer_Tool.class, null, SVGViewer_Tool.this.project);
  }
  /*package*/ void zoom(double scale) {
    AffineTransform at = AffineTransform.getScaleInstance(scale, scale);
    if (SVGViewer_Tool.this.svgCanvas.getGraphicsNode() == null) {
      return;
    }
    AffineTransform rat = SVGViewer_Tool.this.svgCanvas.getRenderingTransform();
    if (at != null) {
      Dimension dim = SVGViewer_Tool.this.svgCanvas.getSize();
      int x = dim.width / 2;
      int y = dim.height / 2;
      AffineTransform t = AffineTransform.getTranslateInstance(x, y);
      t.concatenate(at);
      t.translate(-x, -y);
      t.concatenate(rat);
      SVGViewer_Tool.this.svgCanvas.setRenderingTransform(t);
    }
  }
  /*package*/ String getPlantUMLSource() {
    return SVGViewer_Tool.this.plantUMLSource;
  }
  public JComponent getComponent() {
    // Create a panel and add the button, status label and the SVG canvas.
    final JPanel panel = new JPanel(new BorderLayout());

    BaseGroup group = ActionUtils.getGroup("plantmps.plugin.plugin.Toolbargroup_ActionGroup");
    JComponent toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true).getComponent();
    panel.add(BorderLayout.NORTH, toolbar);

    SVGViewer_Tool.this.svgCanvas = new PlantUMLSVGCanvas(new MbeddrUserAgent(panel), true, true);
    JSVGScrollPane scroll = new JSVGScrollerWithMouseWheelListener(SVGViewer_Tool.this.svgCanvas);
    panel.add(BorderLayout.CENTER, scroll);

    return panel;
  }
}
