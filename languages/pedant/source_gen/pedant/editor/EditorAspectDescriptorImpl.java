package pedant.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.cells.KeyMap;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Alias_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AliasReference_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Definition_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new InheritanceRelations_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Pedantry_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new PedantryReference_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Punctuation_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Word_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<KeyMap> getDeclaredKeyMaps() {
    return Arrays.<KeyMap>asList(new HandleSpace());
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x59c371a1e9b64cc1L), MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x59c371a1e9b64ccfL), MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x59c371a1e9b635c1L), MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x6392399e2201410L), MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x59c371a1e9b64cafL), MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x59c371a1e9b96d91L), MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x59c371a1e9c4bdd6L), MetaIdFactory.conceptId(0xe1654c1208bf4d54L, 0x9998af58f6362837L, 0x59c371a1e9b64cc9L)).seal();
}
