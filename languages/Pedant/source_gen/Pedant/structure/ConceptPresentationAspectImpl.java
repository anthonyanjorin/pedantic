package Pedant.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Alias;
  private ConceptPresentation props_AliasReference;
  private ConceptPresentation props_Definition;
  private ConceptPresentation props_Pedantry;
  private ConceptPresentation props_PedantryReference;
  private ConceptPresentation props_Punctuation;
  private ConceptPresentation props_Word;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Alias:
        if (props_Alias == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The name of something");
          cpb.presentationByName();
          props_Alias = cpb.create();
        }
        return props_Alias;
      case LanguageConceptSwitch.AliasReference:
        if (props_AliasReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("definition (alias)");
          props_AliasReference = cpb.create();
        }
        return props_AliasReference;
      case LanguageConceptSwitch.Definition:
        if (props_Definition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("An explanation of the meaning of a word");
          cpb.rawPresentation("definition");
          props_Definition = cpb.create();
        }
        return props_Definition;
      case LanguageConceptSwitch.Pedantry:
        if (props_Pedantry == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Root container for topics and definitions");
          cpb.presentationByName();
          props_Pedantry = cpb.create();
        }
        return props_Pedantry;
      case LanguageConceptSwitch.PedantryReference:
        if (props_PedantryReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("pendantry");
          props_PedantryReference = cpb.create();
        }
        return props_PedantryReference;
      case LanguageConceptSwitch.Punctuation:
        if (props_Punctuation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Punctuation = cpb.create();
        }
        return props_Punctuation;
      case LanguageConceptSwitch.Word:
        if (props_Word == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("normal text");
          props_Word = cpb.create();
        }
        return props_Word;
    }
    return null;
  }
}
